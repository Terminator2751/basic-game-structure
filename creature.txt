package tile_same;

public abstract class  Creature extends Entity{
	
	public int health ; 
	public float speed;
	public static final int DEFALUT_WIDTH = 64,DEFAULT_HEIGHT = 64;
	public final int DEFALUT_HEALTH = 10;
	public final float DEFAULT_SPEED = 3.0f; 
	public  float Xmove;
	public  float Ymove;
	public Creature(Handler handler,float x, float y,int width,int height) {
		super(handler,x, y,width,height);
		health = DEFALUT_HEALTH;
		speed = DEFAULT_SPEED; 
		Xmove = 0;
		Ymove = 0;
	}
	
	public void move() {
		if(!checkEntityCollision(Xmove,0f)) {	
			xmove();
		}
		if(!checkEntityCollision(0f,Ymove)) {
			ymove();
		}
	}
	
	public void xmove() {
		
		if(Xmove > 0) {
			int tx = (int) ((x + bounds.x + bounds.width + Xmove)/Tile.TILE_WIDTH);
			if(!collisionWithTile(tx,(int) (y + bounds.y) /  Tile.TILE_HEIGHT)&&!collisionWithTile(tx, (int)(y + bounds.y+bounds.height)/Tile.TILE_HEIGHT)) {
				x += Xmove;
			}else {
				x = tx * Tile.TILE_WIDTH - bounds.x - bounds.width - 1;  
			}
		}else if(Xmove < 0) {
			int tx = (int) ((x + bounds.x  + Xmove)/Tile.TILE_WIDTH);
			if(!collisionWithTile(tx,(int) (y + bounds.y) /  Tile.TILE_HEIGHT)&&!collisionWithTile(tx, (int)(y + bounds.y+bounds.height)/Tile.TILE_HEIGHT)) {
				x += Xmove;
			}else {
				x = tx * Tile.TILE_WIDTH + Tile.TILE_WIDTH - bounds.x;
			}
		}
		
	}
	
	public void ymove() {
		if(Ymove < 0) {
			int ty = (int) ((y + bounds.y + Ymove)/Tile.TILE_HEIGHT);
			if(!collisionWithTile((int)((x + bounds.x) /  Tile.TILE_WIDTH),ty)&&!collisionWithTile((int)((x + bounds.x + bounds.width)/Tile.TILE_WIDTH),ty)) {
				y += Ymove;
			}else {
				y = ty * Tile.TILE_HEIGHT + Tile.TILE_HEIGHT - bounds.y;
			}
		}else if(Ymove > 0) {
			int ty = (int) ((y + bounds.y + bounds.height + Ymove)/Tile.TILE_HEIGHT);
			if(!collisionWithTile((int)((x + bounds.x) /  Tile.TILE_WIDTH),ty)&&!collisionWithTile((int)((x + bounds.x + bounds.width)/Tile.TILE_WIDTH),ty)) {
				y += Ymove;
			}else {
				y = ty * Tile.TILE_HEIGHT - bounds.y - bounds.height - 1; 
			}
		}
	}  
	
	public boolean collisionWithTile(int x,int y) {
		return handler.getWorld().getTile(x, y).isSolid();
	}
	
	public float getXmove() {
		return Xmove;
	}
	public void setXmove(float xmove) {
		Xmove = xmove;
	}
	public float getYmove() {
		return Ymove;
	}
	public void setYmove(float ymove) {
		Ymove = ymove;
	}
	public int getHealth() {
		return health;
	}
	public void setHealth(int health) {
		this.health = health;
	}
	public float getSpeed() {
		return speed;
	}
	public void setSpeed(float speed) {
		this.speed = speed;
	}
	}