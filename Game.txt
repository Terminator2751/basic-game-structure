package tile_same;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

public class Game implements Runnable {
	private String title;
	private int width;
	private int height;
	public Thread thread;
	public BufferStrategy bs;
	public Graphics g;
	public Display display;
	public BufferedImage image;
	public SpriteSheet sheet;
	public State gamestate;
	public KeyManager key_manager; 
	public GameCamera gamecamera;
	public Handler handler;
	public boolean Running = false;
	public MouseManager mouseManager;
	public MenuState menuState;
	public Game(String title,int width,int height) {
		this.title = title;
		this.width = width;
		this.height = height;
		key_manager = new KeyManager();
		mouseManager = new MouseManager();
	}
	
	public void start() {
		if(Running==true) {return;}
		Running = true;
		thread = new Thread(this);
		thread.start();
	}
	
	public void init() {
		display = new Display(title,width,height);
		display.getFrame().addKeyListener(key_manager);
		display.getFrame().addMouseListener(mouseManager);
		display.getFrame().addMouseMotionListener(mouseManager);
		display.getCanvas().addMouseListener(mouseManager);
		display.getCanvas().addMouseMotionListener(mouseManager);
		Assets.init();	
		handler = new Handler(this);
		gamecamera= new GameCamera(handler,0,0);
		gamestate = new GameState(handler);
		menuState = new MenuState(handler);
		State.setState(menuState);
	}
	
	public void tick() {
		key_manager.tick();
		if(State.getState()!=null) {
			State.getState().tick();
			}
		}
	
	
	public void run(){
		
		init();
		
		int fps = 60;
		double timePerTick = 1000000000 / fps;
		double delta = 0;
		long now;
		long lastTime = System.nanoTime();
		long timer = 0;
		int ticks = 0;
		
		while(Running){
			now = System.nanoTime();
			delta += (now - lastTime) / timePerTick;
			timer += now - lastTime;
			lastTime = now;
			
			if(delta >= 1){
				tick();
				render();
				ticks++;
				delta--;
			}
			
			if(timer >= 1000000000){
				ticks = 0;
				timer = 0;
			}
		}
		
		stop();
		
	}
	
	public void render() {
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//clear
		g.clearRect(0, 0, width, height);
		//draw
		if(State.getState()!=null) {
			State.getState().render(g);
			}
		//end draw
		g.dispose();
		bs.show();
	}
	
	public synchronized void stop() {
		if(!Running) {return;}
		Running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	public KeyManager getkeyManager() {
		return key_manager;

	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}


	public GameCamera getGamecamera() {
		return gamecamera;
	}
	
	public MouseManager getMouseManager() {
		return mouseManager;
	}


	
}
